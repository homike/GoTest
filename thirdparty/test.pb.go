// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package thirdparty

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestInfo struct {
	InfoMap map[int32]bool `protobuf:"bytes,1,rep,name=InfoMap,proto3" json:"InfoMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" xorm:"json" redis:"-"`
}

func (m *TestInfo) Reset()         { *m = TestInfo{} }
func (m *TestInfo) String() string { return proto.CompactTextString(m) }
func (*TestInfo) ProtoMessage()    {}
func (*TestInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *TestInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestInfo.Unmarshal(m, b)
}
func (m *TestInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestInfo.Marshal(b, m, deterministic)
}
func (m *TestInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestInfo.Merge(m, src)
}
func (m *TestInfo) XXX_Size() int {
	return xxx_messageInfo_TestInfo.Size(m)
}
func (m *TestInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TestInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TestInfo proto.InternalMessageInfo

func (m *TestInfo) GetInfoMap() map[int32]bool {
	if m != nil {
		return m.InfoMap
	}
	return nil
}

type Test struct {
	Infos map[int32]*TestInfo `protobuf:"bytes,1,rep,name=Infos,proto3" json:"Infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" xorm:"json" redis:"-"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *Test) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test.Unmarshal(m, b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test.Marshal(b, m, deterministic)
}
func (m *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(m, src)
}
func (m *Test) XXX_Size() int {
	return xxx_messageInfo_Test.Size(m)
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

func (m *Test) GetInfos() map[int32]*TestInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func init() {
	proto.RegisterType((*TestInfo)(nil), "pb.TestInfo")
	proto.RegisterMapType((map[int32]bool)(nil), "pb.TestInfo.InfoMapEntry")
	proto.RegisterType((*Test)(nil), "pb.Test")
	proto.RegisterMapType((map[int32]*TestInfo)(nil), "pb.Test.InfosEntry")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xaa, 0xe6, 0xe2, 0x08, 0x49,
	0x2d, 0x2e, 0xf1, 0xcc, 0x4b, 0xcb, 0x17, 0x32, 0xe6, 0x62, 0x07, 0xd1, 0xbe, 0x89, 0x05, 0x12,
	0x8c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x92, 0x7a, 0x05, 0x49, 0x7a, 0x30, 0x69, 0x3d, 0xa8, 0x9c,
	0x6b, 0x5e, 0x49, 0x51, 0x65, 0x10, 0x4c, 0xa5, 0x94, 0x15, 0x17, 0x0f, 0xb2, 0x84, 0x90, 0x00,
	0x17, 0x73, 0x76, 0x6a, 0xa5, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x88, 0x29, 0x24, 0xc2,
	0xc5, 0x5a, 0x96, 0x98, 0x53, 0x9a, 0x2a, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x11, 0x04, 0xe1, 0x58,
	0x31, 0x59, 0x30, 0x2a, 0x55, 0x72, 0xb1, 0x80, 0x4c, 0x17, 0xd2, 0xe4, 0x62, 0x05, 0x99, 0x51,
	0x0c, 0xb5, 0x56, 0x18, 0x66, 0x2d, 0xd8, 0xca, 0x62, 0x88, 0x85, 0x10, 0x15, 0x52, 0x6e, 0x5c,
	0x5c, 0x08, 0x41, 0x2c, 0x96, 0x29, 0x21, 0x5b, 0xc6, 0x6d, 0xc4, 0x83, 0xec, 0x03, 0x24, 0xab,
	0x93, 0xd8, 0xc0, 0x41, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xa8, 0x66, 0x96, 0x10,
	0x01, 0x00, 0x00,
}
